% libbuffer
% Nicolas Martyanoff

# Introduction

**TODO**

# License

`libbuffer` is released under the ISC license. See the `LICENSE` file for
more information. `libhashtable` is free software as defined by the
OSI ^[Open Source Initiative: <http://opensource.org>].

# Thread safety

Using a buffer from multiple threads simultaneously is not safe. It is however
safe to use differents buffers in multiple threads. The error string returned
by `bf_get_error` is local to each thread.

# Interface

The name of all symbols exported by the library is prefixed by `bf_`.

## `bf_get_error`
~~~ {.c}
    const char *bf_get_error(void);
~~~

Return the current error string. If there is no current error string, an empty
string is returned. The character string referenced by the returned pointer
can be modified by any function of the library.

When a function of the library fails, an error string is set.

## `bf_memory_allocator`
~~~ {.c}
    struct bf_memory_allocator {
        void *(*malloc)(size_t sz);
        void (*free)(void *ptr);
        void *(*calloc)(size_t nb, size_t sz);
        void *(*realloc)(void *ptr, size_t sz);
    };
~~~

This structure contains the functions used for memory allocation in the
library.

## `bf_set_memory_allocator`
~~~ {.c}
     void bf_set_memory_allocator(const struct bf_memory_allocator *allocator);
~~~

Set the memory allocator used by all functions in the library. The library
assumes that if the `malloc`, `calloc` or `realloc` functions return NULL,
then allocation has failed and the value of `errno` indicates the cause of the
failure.

If `allocator` is null, the default memory allocator
(`bf_default_memory_allocator`) is used.

## `bf_default_memory_allocator`
~~~ {.c}
    struct bf_memory_allocator *bf_default_memory_allocator;
~~~

A pointer to the default memory allocator used by the library.

## `bf_buffer_new`
~~~ {.c}
    struct bf_buffer *bf_buffer_new(size_t initial_size);
~~~~

Create and return a new buffer. If `initial_size` is greater than 0, the
buffer is initialized with a size of `initial_size` bytes. If it is lower or
equal to 0, the buffer is left uninitialized.

## `bf_buffer_delete`
~~~ {.c}
    void bf_buffer_delete(struct bf_buffer *buf);
~~~

Free `buf` and all data associated to it. If `buf` is null or if the buffer is
not initialized, no action is performed.

## `bf_buffer_data`
~~~ {.c}
    char *bf_buffer_data(const struct bf_buffer *buf);
~~~

Return a pointer to the data stored in `buf`. If `buf` is not initialized,
`bf_buffer_data` returns `NULL`.

## `bf_buffer_length`
~~~ {.c}
    size_t bf_buffer_length(const struct bf_buffer *buf);
~~~

Return the length of `buf`, i.e. the number of bytes stored inside it.

## `bf_buffer_free_space`
~~~ {.c}
    size_t bf_buffer_free_space(const struct bf_buffer *buf);
~~~

Return the size of the free space at the end of `buf`.

## `bf_buffer_size`
~~~ {.c}
    size_t bf_buffer_size(const struct bf_buffer *buf);
~~~

Return the size of `buf`, i.e. the number of bytes allocated for its content.
The size of the buffer is greater or equal to its length.

## `bf_buffer_clear`
~~~ {.c}
    void bf_buffer_clear(struct bf_buffer *buf);
~~~

Clear all data stored in `buf`. Note that this function does not actually
modify the content of the buffer and has a complexity of `Ο(1)`.

## `bf_buffer_truncate`
~~~ {.c}
    void bf_buffer_truncate(struct bf_buffer *buf, size_t sz);
~~~

Truncate the content of `buf` to `sz` bytes. Note that this function does not
actually modify the content of the buffer and has a complexity of `Ο(1)`.

## `bf_buffer_reserve`
~~~ {.c}
    char *bf_buffer_reserve(struct bf_buffer *buf, size_t sz) {
~~~

Make sure that `buf` has at least `sz` bytes of free contiguous memory at its
end, then return a pointer to the first byte after the end of `buf`.

If memory allocation fails, `bf_buffer_reserve` returns `NULL`.

## `bf_buffer_insert`
~~~ {.c}
    int bf_buffer_insert(struct bf_buffer *buf, size_t offset, const char *data,
                         size_t sz);
~~~

Copy `sz` bytes referenced by `data` at the offset `offset` of `buf`. If
`offset` is equal to the length of `buf`, data are copied to the end of `buf`.
If not, the content of `buf` after `offset` is moved to make place for new
data.

If a memory allocation function fails, `bf_buffer_insert` returns -1. If not,
it returns 0.

## `bf_buffer_add`
~~~ {.c}
    int bf_buffer_add(struct bf_buffer *buf, const char *data, size_t sz);
~~~

Copy `sz` bytes referenced by `data` to the end of `buf`.

If a memory allocation function fails, `bf_buffer_add` returns -1. If not,
it returns 0.

## `bf_buffer_add_buffer`
~~~ {.c}
    int bf_buffer_add_buffer(struct bf_buffer *buf, const struct bf_buffer *src);
~~~

Copy the content of the `src` buffer to `buf`.

If a memory allocation function fails, `bf_buffer_add_buffer` returns -1.
If not, it returns 0.

## `bf_buffer_add_string`
~~~ {.c}
    int bf_buffer_add_string(struct bf_buffer *buf, const char *str);
~~~

Copy the null-terminated string `str` to `buf`. Note that the final `\0`
byte is not copied.

If a memory allocation function fails, `bf_buffer_add_string` returns -1.
If not, it returns 0.

## `bf_buffer_add_vprintf`
~~~ {.c}
    int bf_buffer_add_vprintf(struct bf_buffer *buf, const char *fmt, va_list ap);
~~~

Add formatted data defined by the format string `fmt` and the `va_list`
variable `ap` to `buf`. Note that no final '\0' is added.

If formatting or memory allocation fails, `bf_buffer_add_printf` returns -1.
If not, it returns 0.

## `bf_buffer_add_printf`
~~~ {.c}
    int bf_buffer_add_printf(struct bf_buffer *buf, const char *fmt, ...)
~~~

Add formatted data defined by the format string `fmt` to `buf`. Note that no
final '\0' is added.

If formatting or memory allocation fails, `bf_buffer_add_printf` returns -1.
If not, it returns 0.

## `bf_buffer_skip`
~~~ {.c}
    void bf_buffer_skip(struct bf_buffer *buf, size_t n);
~~~

Remove up to `n` bytes at the beginning of `buf`. Note that this function does
not actually modify the content of the buffer and has a complexity of `Ο(1)`.

## `bf_buffer_remove_before`
~~~ {.c}
    size_t bf_buffer_remove_before(struct bf_buffer *buf, size_t offset, size_t n);
~~~

Remove up to `n` bytes before offset `offset` in `buf`.

## `bf_buffer_remove_after`
~~~ {.c}
    size_t bf_buffer_remove_after(struct bf_buffer *buf, size_t offset, size_t n);
~~~

Remove up to `n` bytes after offset `offset` in `buf`.

## `bf_buffer_remove`
~~~ {.c}
    size_t bf_buffer_remove(struct bf_buffer *buf, size_t n);
~~~

Remove up to `n` bytes at the end of `buf`. Note that this function does not
actually modify the content of the buffer and has a complexity of `Ο(1)`.

## `bf_buffer_dup`
~~~ {.c}
    char *bf_buffer_dup(const struct bf_buffer *buf);
~~~

Duplicate the content of `buf` and return a pointer to the newly allocated
data. If `buf` is empty or if memory cannot be allocated, `bf_buffer_dup`
returns `NULL`.

## `bf_buffer_dup_string`
~~~ {.c}
    char *bf_buffer_dup_string(const struct bf_buffer *buf);
~~~

Duplicate the content of `buf` as a null-terminated string and return a
pointer to the newly allocated data. If `buf` is empty, an empty string is
returned. If memory cannot be allocated, `bf_buffer_dup_string` returns
`NULL`.

## `bf_buffer_read`
~~~ {.c}
    ssize_t bf_buffer_read(struct bf_buffer *buf, int fd, size_t n);
~~~

Use the `read` POSIX function to read up to `n` bytes from file descriptor
`fd` at the end of `buf`. Returns the value returned by `read`.

## `bf_buffer_write`
~~~ {.c}
    ssize_t bf_buffer_write(struct bf_buffer *buf, int fd);
~~~

Use the `write` POSIX function to write the content of `buf` to file
descriptor `fd`. Returns the value returned by `write`. If the write operation
succeeds, written data are skipped in `buf`.
